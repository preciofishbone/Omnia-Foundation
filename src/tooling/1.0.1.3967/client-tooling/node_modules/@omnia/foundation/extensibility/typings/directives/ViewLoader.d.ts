import { Compiler, ViewContainerRef, ComponentFactory, ComponentRef, AfterViewInit, OnChanges, OnInit, EventEmitter } from '@angular/core';
export interface IEntityData {
    entity: any;
}
export declare class DynamicTypeBuilderService {
    private compiler;
    constructor(compiler: Compiler);
    createComponentFactory(template: string, controlId: string): Promise<ComponentFactory<IEntityData>>;
    createNewComponent(strTemplate: string): any;
    createComponentModule(componentType: any, controlId: string): any;
    private createDynamicModuleClass();
    private createDynamicComponentClass();
}
export declare class ViewLoader implements AfterViewInit, OnChanges, OnInit {
    private typeBuilderService;
    templateHTML: string;
    entityData: any;
    controlId: any;
    onViewRendered: EventEmitter<boolean>;
    componentTarget: ViewContainerRef;
    protected componentRef: ComponentRef<IEntityData>;
    protected wasViewInitialized: boolean;
    constructor(typeBuilderService: DynamicTypeBuilderService);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    init: () => void;
}
