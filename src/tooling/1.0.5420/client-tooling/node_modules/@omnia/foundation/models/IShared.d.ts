import { Enums } from '../extensibility';
export declare module Shared {
    interface IApiOperationResult<T> {
        data: T;
        errorMessage: string;
        isSuccess: boolean;
        status: number;
    }
    interface ITimeZone {
        id: string;
        displayName: string;
    }
    interface IUserInfo {
        loginName?: string;
        displayName?: string;
        userId: number;
        photoUrl: string;
    }
    interface IPortalWeb {
        serverRelativeUrl?: string;
        title?: string;
        url?: string;
        relativeUrl?: string;
        editorGroup?: string;
        isInRecycleBin?: boolean;
        recycleBinItemId?: string;
        deletedStatus?: string;
    }
    interface IPortalWebpart {
        id: string;
        title: string;
    }
    interface ITransactionLog {
        messages: Array<IMessage>;
        transactionCompleted: boolean;
        logType: Enums.QueueMessageLogType;
    }
    interface IMessage {
        message: string;
        logType: Enums.QueueMessageLogType;
    }
    interface ILanguage {
        lcid: number;
        displayName: string;
        name: string;
    }
    interface IPageLayout {
        title: string;
        displayName: string;
        isDefault: boolean;
    }
    interface IPage {
        title?: string;
        name?: string;
        url?: string;
        parentTermId?: string;
        ownerNavigationTerm?: string;
        pageLayout?: string;
        webUrl?: string;
    }
    interface ILookupValue {
        id: any;
        title: string;
    }
    interface IIcon {
        iconType: Enums.IconType;
        fontValue?: string;
        customValue?: string;
    }
    interface IPaging {
        total?: number;
        maxSize?: number;
        currentPage?: number;
    }
    interface IPagingTypeModel {
        kind: Enums.PagingType;
        displayName: string;
    }
    interface ISortableOptions {
        containment?: string;
        update?: (event, ui, placeHolderElement, item) => void;
    }
    interface ITreePickerNode {
        title: string;
        hoverText: string;
        isExpanded: boolean;
        isSelected: boolean;
        children: Array<ITreePickerNode>;
        parent: ITreePickerNode;
        domainObj: any;
    }
}
