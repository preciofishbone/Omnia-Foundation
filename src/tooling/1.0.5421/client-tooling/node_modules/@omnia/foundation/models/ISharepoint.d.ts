export declare module SharePoint {
    interface ISharePointContextInfo {
        alertsEnabled: boolean;
        allowSilverlightPrompt: string;
        clientServerTimeDelta: number;
        crossDomainPhotosEnabled: boolean;
        currentCultureName: string;
        currentLanguage: number;
        currentUICultureName: string;
        isAppWeb: boolean;
        layoutsUrl: string;
        pageItemId: number;
        pageListId: string;
        pagePersonalizationScope: number;
        serverRequestPath: string;
        siteAbsoluteUrl: string;
        siteClientTag: string;
        siteServerRelativeUrl: string;
        systemUserKey: string;
        tenantAppVersion: string;
        updateFormDigestPageLoaded: Date;
        userId: number;
        userLoginName: string;
        webAbsoluteUrl: string;
        webLanguage: number;
        webLogoUrl: string;
        webPermMasks: Object;
        webServerRelativeUrl: string;
        webTemplate: string;
        webTitle: string;
        webUIVersion: number;
    }
    interface ISharePointNewFile {
        newFileUrl: string;
        isFolder: boolean;
        newFileSize: number;
        newFileIcon: string;
    }
    interface ITaxonomyPickerOptions {
        isCreateTermInSuggestion: boolean;
        isMulti?: boolean;
        isReadOnly?: boolean;
        allowFillIn?: boolean;
        termSetId?: string;
        useHashtags?: boolean;
        useKeyword?: boolean;
        maxSuggestions?: number;
        lcid?: number;
        language?: string;
        filterTermId?: string;
        levelToShowTerms?: number;
        useTermSetasRootNode?: boolean;
    }
    interface ITaxonomyPickerValue {
        Id: string;
        Name: string;
    }
    interface ITaxonomyFieldValue {
        label?: string;
        termGuid?: string;
        typeId?: string;
        wssId?: number;
    }
    interface IUserPickerValue {
    }
    interface IUserFieldValue {
        email?: string;
        typeId?: string;
        lookupId?: number;
        lookupValue?: string;
        key?: string;
    }
    interface IPeoplePickerPrincipal {
        key: string;
        description?: string;
        displayText: string;
        entityType?: string;
        providerDisplayName?: string;
        providerName?: string;
        isResolved?: boolean;
        entityData?: any;
        multipleMatches?: any;
        tooltip?: string;
        canNotRemove?: boolean;
    }
    interface IPeoplePickerUserEntity {
        Title: string;
        MobilePhone: string;
        Department: string;
        Email: string;
    }
    interface IPeoplePickerGroupEntity {
        SPGroupID: string;
        AccountName: string;
        PrincipalType: string;
    }
    interface IWebAssociatedGroups {
        owners: Array<IPeoplePickerPrincipal>;
        members: Array<IPeoplePickerPrincipal>;
        visitors: Array<IPeoplePickerPrincipal>;
    }
    interface IWebAssociatedGroup {
        id?: number;
        title?: string;
        users?: Array<IPeoplePickerPrincipal>;
        canCurrentUserViewMembership?: boolean;
        canCurrentUserManageGroup?: boolean;
        canCurrentUserEditMembership?: boolean;
        isMultiple?: boolean;
        groupNotExist?: boolean;
    }
    interface IUser {
        loginName?: string;
        displayName?: string;
        userId: number;
        photoUrl: string;
    }
    interface IGroup {
        id?: number;
        title?: string;
        loginName?: string;
    }
    interface IListIdentifier {
        id?: string;
        title: string;
        listUrl: string;
        webUrl: string;
        rootFolderUrl?: string;
    }
}
